"use strict";(self.webpackChunkdatafuse=self.webpackChunkdatafuse||[]).push([[2122],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4887:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={id:"development-codingguidelines",title:"Coding Guidelines",sidebar_position:2},l=void 0,c={unversionedId:"development/development-codingguidelines",id:"development/development-codingguidelines",isDocsHomePage:!1,title:"Coding Guidelines",description:"This document describes the coding guidelines for the Datafuse Rust codebase.",source:"@site/docs/development/coding-guidelines.md",sourceDirName:"development",slug:"/development/development-codingguidelines",permalink:"/docs/development/development-codingguidelines",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/development/coding-guidelines.md",version:"current",sidebarPosition:2,frontMatter:{id:"development-codingguidelines",title:"Coding Guidelines",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Contribution Guide",permalink:"/docs/development/development-contributing"},next:{title:"Tracing in Datafuse",permalink:"/docs/development/development-tracing"}},u=[{value:"Code formatting",id:"code-formatting",children:[]},{value:"Code analysis",id:"code-analysis",children:[]},{value:"Code documentation",id:"code-documentation",children:[]},{value:"Testing",id:"testing",children:[]}],d={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document describes the coding guidelines for the Datafuse Rust codebase."),(0,o.kt)("h2",{id:"code-formatting"},"Code formatting"),(0,o.kt)("p",null,"All code formatting is enforced with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/rustfmt"},"rustfmt")," with a project-specific configuration. Below is an example command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ make fmt\n")),(0,o.kt)("h2",{id:"code-analysis"},"Code analysis"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/rust-clippy"},"Clippy")," is used to catch common mistakes and is run as a part of continuous integration. Before submitting your code for review, you can run lint:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ make lint\n")),(0,o.kt)("h2",{id:"code-documentation"},"Code documentation"),(0,o.kt)("p",null,"Any public fields, functions, and methods should be documented with ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#making-useful-documentation-comments"},"Rustdoc"),"."),(0,o.kt)("p",null,"Please follow the conventions as detailed below for modules, structs, enums, and functions. The ",(0,o.kt)("em",{parentName:"p"},"single line")," is used as a preview when navigating Rustdoc. As an example, see the 'Structs' and 'Enums' sections in the ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/collections/index.html"},"collections")," Rustdoc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// [Single line] One line summary description\n///\n/// [Longer description] Multiple lines, inline code\n/// examples, invariants, purpose, usage, etc.\n[Attributes] If attributes exist, add after Rustdoc\n")),(0,o.kt)("p",null,"Example below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Represents (x, y) of a 2-dimensional grid\n///\n/// A line is defined by 2 instances.\n/// A plane is defined by 3 instances.\n#[repr(C)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n")),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Unit tests")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ make unit-test\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Stateless tests")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ make stateless-test\n")))}p.isMDXComponent=!0}}]);