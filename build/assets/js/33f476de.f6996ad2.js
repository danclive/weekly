"use strict";(self.webpackChunkdatafuse=self.webpackChunkdatafuse||[]).push([[4270],{3905:function(e,r,n){n.d(r,{Zo:function(){return p},kt:function(){return m}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function u(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),c=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):u(u({},r),e)),n},p=function(e){var r=c(e.components);return t.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},l=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),l=c(n),m=a,f=l["".concat(i,".").concat(m)]||l[m]||d[m]||s;return n?t.createElement(f,u(u({ref:r},p),{},{components:n})):t.createElement(f,u({ref:r},p))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=n.length,u=new Array(s);u[0]=l;var o={};for(var i in r)hasOwnProperty.call(r,i)&&(o[i]=r[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,u[1]=o;for(var c=2;c<s;c++)u[c]=n[c];return t.createElement.apply(null,u)}return t.createElement.apply(null,n)}l.displayName="MDXCreateElement"},3029:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return p},default:function(){return l}});var t=n(7462),a=n(3366),s=(n(7294),n(3905)),u=["components"],o={id:"development-tracing",title:"Tracing in Datafuse",sidebar_position:3},i=void 0,c={unversionedId:"development/development-tracing",id:"development/development-tracing",isDocsHomePage:!1,title:"Tracing in Datafuse",description:"Tracing In Datafuse",source:"@site/docs/development/tracing.md",sourceDirName:"development",slug:"/development/development-tracing",permalink:"/docs/development/development-tracing",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/development/tracing.md",version:"current",sidebarPosition:3,frontMatter:{id:"development-tracing",title:"Tracing in Datafuse",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Coding Guidelines",permalink:"/docs/development/development-codingguidelines"},next:{title:"How to profile Datafuse",permalink:"/docs/development/development-howtoprofile"}},p=[{value:"Tracing In Datafuse",id:"tracing-in-datafuse",children:[]},{value:"Enable Tracing",id:"enable-tracing",children:[]}],d={toc:p};function l(e){var r=e.components,n=(0,a.Z)(e,u);return(0,s.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"tracing-in-datafuse"},"Tracing In Datafuse"),(0,s.kt)("p",null,"Datafuse using Rust's tracing ecosystem ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tokio-rs/tracing"},"tokio-tracing")," to do log and profile."),(0,s.kt)("p",null,"Datafuse default log level is ",(0,s.kt)("inlineCode",{parentName:"p"},"INFO"),"."),(0,s.kt)("h2",{id:"enable-tracing"},"Enable Tracing"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'QUERY_LOG_LEVEL="DEBUG" ./datafuse-query\n')),(0,s.kt)("p",null,"If we want to track the execution of a query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"set max_threads=1;\nselect sum(number+1)+1 from numbers(10000) where number>0 group by number%3;\n")),(0,s.kt)("p",null,"Tracing log:"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Tracing"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'[2021-06-10T08:40:36Z DEBUG clickhouse_srv::cmd] Got packet Query(QueryRequest { query_id: "bac2b254-6245-4cae-910d-3e5e979c8b68", client_info: QueryClientInfo { query_kind: 1, initial_user: "", initial_query_id: "", initial_address: "0.0.0.0:0", interface: 1, os_user: "bohu", client_hostname: "thinkpad", client_name: "ClickHouse ", client_version_major: 21, client_version_minor: 4, client_version_patch: 6, client_revision: 54447, http_method: 0, http_user_agent: "", quota_key: "" }, stage: 2, compression: 1, query: "select sum(number+1)+1 from numbers(10000) where number>0 group by number%3;" })\nJun 10 16:40:36.131 DEBUG ThreadId(16) datafuse_query::sql::plan_parser: query="select sum(number+1)+1 from numbers(10000) where number>0 group by number%3;"\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Identifier(Ident { value: "number", quote_style: None })\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() Plus\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 30\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Value(Number("1", false))\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() RParen\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() RParen\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Function(Function { name: ObjectName([Ident { value: "sum", quote_style: None }]), args: [Unnamed(BinaryOp { left: Identifier(Ident { value: "number", quote_style: None }), op: Plus, right: Value(Number("1", false)) })], over: None, distinct: false })\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() Plus\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 30\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Value(Number("1", false))\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() Word(Word { value: "from", quote_style: None, keyword: FROM })\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() Word(Word { value: "from", quote_style: None, keyword: FROM })\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Value(Number("10000", false))\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() RParen\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Identifier(Ident { value: "number", quote_style: None })\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() Gt\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 20\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Value(Number("0", false))\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() Word(Word { value: "group", quote_style: None, keyword: GROUP })\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() Word(Word { value: "group", quote_style: None, keyword: GROUP })\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Identifier(Ident { value: "number", quote_style: None })\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() Mod\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 40\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] parsing expr\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] prefix: Value(Number("3", false))\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() SemiColon\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] get_next_precedence() SemiColon\n[2021-06-10T08:40:36Z DEBUG sqlparser::parser] next precedence: 0\nJun 10 16:40:36.135  INFO ThreadId(16) sql_statement_to_plan: datafuse_query::sql::plan_parser: new\nJun 10 16:40:36.136  INFO ThreadId(16) sql_statement_to_plan: datafuse_query::sql::plan_parser: enter\nJun 10 16:40:36.136  INFO ThreadId(16) sql_statement_to_plan:select_to_plan: datafuse_query::sql::plan_parser: new\nJun 10 16:40:36.136  INFO ThreadId(16) sql_statement_to_plan:select_to_plan: datafuse_query::sql::plan_parser: enter\nJun 10 16:40:36.139  INFO ThreadId(16) sql_statement_to_plan:select_to_plan: datafuse_query::sql::plan_parser: exit\nJun 10 16:40:36.139  INFO ThreadId(16) sql_statement_to_plan:select_to_plan: datafuse_query::sql::plan_parser: close time.busy=2.65ms time.idle=457\xb5s\nJun 10 16:40:36.139  INFO ThreadId(16) sql_statement_to_plan: datafuse_query::sql::plan_parser: exit\nJun 10 16:40:36.139  INFO ThreadId(16) sql_statement_to_plan: datafuse_query::sql::plan_parser: close time.busy=3.57ms time.idle=453\xb5s\nJun 10 16:40:36.140  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::interpreters::interpreter_select: new\nJun 10 16:40:36.141  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::interpreters::interpreter_select: enter\nJun 10 16:40:36.141 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::optimizers::optimizer: Before ProjectionPushDown\nProjection: (sum((number + 1)) + 1):UInt64\n  Expression: (sum((number + 1)) + 1):UInt64 (Before Projection)\n    AggregatorFinal: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n      AggregatorPartial: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n        Expression: (number % 3):UInt8, (number + 1):UInt64 (Before GroupBy)\n          Filter: (number > 0)\n            ReadDataSource: scan partitions: [1], scan schema: [number:UInt64], statistics: [read_rows: 10000, read_bytes: 80000]\nJun 10 16:40:36.142 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::optimizers::optimizer: After ProjectionPushDown\nProjection: (sum((number + 1)) + 1):UInt64\n  Expression: (sum((number + 1)) + 1):UInt64 (Before Projection)\n    AggregatorFinal: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n      AggregatorPartial: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n        Expression: (number % 3):UInt8, (number + 1):UInt64 (Before GroupBy)\n          Filter: (number > 0)\n            ReadDataSource: scan partitions: [1], scan schema: [number:UInt64], statistics: [read_rows: 10000, read_bytes: 80000]\nJun 10 16:40:36.142 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::optimizers::optimizer: Before Scatters\nProjection: (sum((number + 1)) + 1):UInt64\n  Expression: (sum((number + 1)) + 1):UInt64 (Before Projection)\n    AggregatorFinal: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n      AggregatorPartial: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n        Expression: (number % 3):UInt8, (number + 1):UInt64 (Before GroupBy)\n          Filter: (number > 0)\n            ReadDataSource: scan partitions: [1], scan schema: [number:UInt64], statistics: [read_rows: 10000, read_bytes: 80000]\nJun 10 16:40:36.143 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::optimizers::optimizer: After Scatters\nProjection: (sum((number + 1)) + 1):UInt64\n  Expression: (sum((number + 1)) + 1):UInt64 (Before Projection)\n    AggregatorFinal: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n      AggregatorPartial: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n        Expression: (number % 3):UInt8, (number + 1):UInt64 (Before GroupBy)\n          Filter: (number > 0)\n            ReadDataSource: scan partitions: [1], scan schema: [number:UInt64], statistics: [read_rows: 10000, read_bytes: 80000]\nJun 10 16:40:36.143  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:reschedule: datafuse_query::interpreters::plan_scheduler: new\nJun 10 16:40:36.143  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:reschedule: datafuse_query::interpreters::plan_scheduler: enter\nJun 10 16:40:36.143  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:reschedule: datafuse_query::interpreters::plan_scheduler: exit\nJun 10 16:40:36.143  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:reschedule: datafuse_query::interpreters::plan_scheduler: close time.busy=145\xb5s time.idle=264\xb5s\nJun 10 16:40:36.144  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:build: datafuse_query::pipelines::processors::pipeline_builder: new\nJun 10 16:40:36.144  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:build: datafuse_query::pipelines::processors::pipeline_builder: enter\nJun 10 16:40:36.144 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:build: datafuse_query::pipelines::processors::pipeline_builder: Received plan:\nProjection: (sum((number + 1)) + 1):UInt64\n  Expression: (sum((number + 1)) + 1):UInt64 (Before Projection)\n    AggregatorFinal: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n      AggregatorPartial: groupBy=[[(number % 3)]], aggr=[[sum((number + 1))]]\n        Expression: (number % 3):UInt8, (number + 1):UInt64 (Before GroupBy)\n          Filter: (number > 0)\n            ReadDataSource: scan partitions: [1], scan schema: [number:UInt64], statistics: [read_rows: 10000, read_bytes: 80000]\nJun 10 16:40:36.145 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:build: datafuse_query::pipelines::processors::pipeline_builder: Pipeline:\nProjectionTransform \xd7 1 processor\n  ExpressionTransform \xd7 1 processor\n    GroupByFinalTransform \xd7 1 processor\n      GroupByPartialTransform \xd7 1 processor\n        ExpressionTransform \xd7 1 processor\n          FilterTransform \xd7 1 processor\n            SourceTransform \xd7 1 processor\nJun 10 16:40:36.145  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:build: datafuse_query::pipelines::processors::pipeline_builder: exit\nJun 10 16:40:36.145  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}:build: datafuse_query::pipelines::processors::pipeline_builder: close time.busy=1.07ms time.idle=215\xb5s\nJun 10 16:40:36.145 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_projection: execute...\nJun 10 16:40:36.145 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_groupby_final: execute...\nJun 10 16:40:36.146 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_groupby_partial: execute...\nJun 10 16:40:36.146 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_source: execute, table:system.numbers, is_remote:false...\nJun 10 16:40:36.148 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_filter: execute...\nJun 10 16:40:36.148 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_expression_executor: (filter executor) execute, actions: [Input(ActionInput { name: "number", return_type: UInt64 }), Constant(ActionConstant { name: "0", value: 0 }), Function(ActionFunction { name: "(number > 0)", func_name: ">", return_type: Boolean, is_aggregated: false, arg_names: ["number", "0"], arg_types: [UInt64, UInt64], arg_fields: [] })]\nJun 10 16:40:36.150 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_filter: Filter cost: 1.678104ms\nJun 10 16:40:36.150 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_expression_executor: (expression executor) execute, actions: [Input(ActionInput { name: "number", return_type: UInt64 }), Constant(ActionConstant { name: "3", value: 3 }), Function(ActionFunction { name: "(number % 3)", func_name: "%", return_type: UInt64, is_aggregated: false, arg_names: ["number", "3"], arg_types: [UInt64, UInt64], arg_fields: [] }), Input(ActionInput { name: "number", return_type: UInt64 }), Constant(ActionConstant { name: "1", value: 1 }), Function(ActionFunction { name: "(number + 1)", func_name: "+", return_type: UInt64, is_aggregated: false, arg_names: ["number", "1"], arg_types: [UInt64, UInt64], arg_fields: [] })]\nJun 10 16:40:36.165 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_groupby_partial: Group by partial cost: 18.822193ms\nJun 10 16:40:36.166 DEBUG ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::pipelines::transforms::transform_groupby_final: Group by final cost: 20.170851ms\nJun 10 16:40:36.167  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::interpreters::interpreter_select: exit\nJun 10 16:40:36.167  INFO ThreadId(309) execute{ctx.id="1c651744-3e73-4b94-9df0-dc031b73c626"}: datafuse_query::interpreters::interpreter_select: close time.busy=26.1ms time.idle=592\xb5s\nJun 10 16:40:36.167 DEBUG ThreadId(309) datafuse_query::pipelines::transforms::transform_expression_executor: (expression executor) execute, actions: [Input(ActionInput { name: "sum((number + 1))", return_type: UInt64 }), Constant(ActionConstant { name: "1", value: 1 }), Function(ActionFunction { name: "(sum((number + 1)) + 1)", func_name: "+", return_type: UInt64, is_aggregated: false, arg_names: ["sum((number + 1))", "1"], arg_types: [UInt64, UInt64], arg_fields: [] })]\nJun 10 16:40:36.168 DEBUG ThreadId(309) datafuse_query::pipelines::transforms::transform_expression_executor: (projection executor) execute, actions: [Input(ActionInput { name: "(sum((number + 1)) + 1)", return_type: UInt64 })]\nJun 10 16:40:36.168 DEBUG ThreadId(309) datafuse_query::pipelines::transforms::transform_projection: Projection cost: 241.864\xb5s\n'))))}l.isMDXComponent=!0}}]);